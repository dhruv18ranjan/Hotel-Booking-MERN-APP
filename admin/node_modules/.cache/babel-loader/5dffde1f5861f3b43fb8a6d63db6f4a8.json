{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"style\"];\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { useForkRef, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/material/utils';\nimport { useGridApiContext } from '../../utils/useGridApiContext';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnsTotalWidthSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridDensityRowHeightSelector } from '../density/densitySelector';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nimport { gridEditRowsStateSelector } from '../editRows/gridEditRowsSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { clamp } from '../../../utils/utils';\nimport { selectedIdsLookupSelector } from '../selection/gridSelectionSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getFirstNonSpannedColumnToRender } from '../columns/gridColumnsUtils'; // Uses binary search to avoid looping through all possible positions\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function binarySearch(offset, positions) {\n  let sliceStart = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let sliceEnd = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : positions.length;\n\n  if (positions.length <= 0) {\n    return -1;\n  }\n\n  if (sliceStart >= sliceEnd) {\n    return sliceStart;\n  }\n\n  const pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);\n  const itemOffset = positions[pivot];\n  return offset <= itemOffset ? binarySearch(offset, positions, sliceStart, pivot) : binarySearch(offset, positions, pivot + 1, sliceEnd);\n}\n\nfunction exponentialSearch(offset, positions, index) {\n  let interval = 1;\n\n  while (index < positions.length && positions[index] < offset) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return binarySearch(offset, positions, Math.floor(index / 2), Math.min(index, positions.length));\n}\n\nexport const getRenderableIndexes = _ref2 => {\n  let {\n    firstIndex,\n    lastIndex,\n    buffer,\n    minFirstIndex,\n    maxLastIndex\n  } = _ref2;\n  return [clamp(firstIndex - buffer, minFirstIndex, maxLastIndex), clamp(lastIndex + buffer, minFirstIndex, maxLastIndex)];\n};\nexport const useGridVirtualScroller = props => {\n  var _currentPage$range3, _currentPage$range4;\n\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const {\n    ref,\n    disableVirtualization,\n    onRenderZonePositioning,\n    renderZoneMinColumnIndex = 0,\n    renderZoneMaxColumnIndex = visibleColumns.length,\n    getRowProps\n  } = props;\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const rowHeight = useGridSelector(apiRef, gridDensityRowHeightSelector);\n  const cellFocus = useGridSelector(apiRef, gridFocusCellSelector);\n  const cellTabIndex = useGridSelector(apiRef, gridTabIndexCellSelector);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const editRowsState = useGridSelector(apiRef, gridEditRowsStateSelector);\n  const selectedRowsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const renderZoneRef = React.useRef(null);\n  const rootRef = React.useRef(null);\n  const handleRef = useForkRef(ref, rootRef);\n  const [renderContext, setRenderContext] = React.useState(null);\n  const prevRenderContext = React.useRef(renderContext);\n  const scrollPosition = React.useRef({\n    top: 0,\n    left: 0\n  });\n  const [containerDimensions, setContainerDimensions] = React.useState({\n    width: null,\n    height: null\n  });\n  const prevTotalWidth = React.useRef(columnsTotalWidth);\n  const getNearestIndexToRender = React.useCallback(offset => {\n    var _currentPage$range, _currentPage$range2;\n\n    const lastMeasuredIndexRelativeToAllRows = apiRef.current.unstable_getLastMeasuredRowIndex();\n    let allRowsMeasured = lastMeasuredIndexRelativeToAllRows === Infinity;\n\n    if ((_currentPage$range = currentPage.range) != null && _currentPage$range.lastRowIndex && !allRowsMeasured) {\n      // Check if all rows in this page are already measured\n      allRowsMeasured = lastMeasuredIndexRelativeToAllRows >= currentPage.range.lastRowIndex;\n    }\n\n    const lastMeasuredIndexRelativeToCurrentPage = clamp(lastMeasuredIndexRelativeToAllRows - (((_currentPage$range2 = currentPage.range) == null ? void 0 : _currentPage$range2.firstRowIndex) || 0), 0, rowsMeta.positions.length);\n\n    if (allRowsMeasured || rowsMeta.positions[lastMeasuredIndexRelativeToCurrentPage] >= offset) {\n      // If all rows were measured (when no row has \"auto\" as height) or all rows before the offset\n      // were measured, then use a binary search because it's faster.\n      return binarySearch(offset, rowsMeta.positions);\n    } // Otherwise, use an exponential search.\n    // If rows have \"auto\" as height, their positions will be based on estimated heights.\n    // In this case, we can skip several steps until we find a position higher than the offset.\n    // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n\n\n    return exponentialSearch(offset, rowsMeta.positions, lastMeasuredIndexRelativeToCurrentPage);\n  }, [apiRef, (_currentPage$range3 = currentPage.range) == null ? void 0 : _currentPage$range3.firstRowIndex, (_currentPage$range4 = currentPage.range) == null ? void 0 : _currentPage$range4.lastRowIndex, rowsMeta.positions]);\n  const computeRenderContext = React.useCallback(() => {\n    if (disableVirtualization) {\n      return {\n        firstRowIndex: 0,\n        lastRowIndex: currentPage.rows.length,\n        firstColumnIndex: 0,\n        lastColumnIndex: visibleColumns.length\n      };\n    }\n\n    const {\n      top,\n      left\n    } = scrollPosition.current; // Clamp the value because the search may return an index out of bounds.\n    // In the last index, this is not needed because Array.slice doesn't include it.\n\n    const firstRowIndex = Math.min(getNearestIndexToRender(top), rowsMeta.positions.length - 1);\n    const lastRowIndex = rootProps.autoHeight ? firstRowIndex + currentPage.rows.length : getNearestIndexToRender(top + containerDimensions.height);\n    let hasRowWithAutoHeight = false;\n    let firstColumnIndex = 0;\n    let lastColumnIndex = columnPositions.length;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: firstRowIndex,\n      lastIndex: lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n\n    for (let i = firstRowToRender; i < lastRowToRender && !hasRowWithAutoHeight; i += 1) {\n      const row = currentPage.rows[i];\n      hasRowWithAutoHeight = apiRef.current.unstable_rowHasAutoHeight(row.id);\n    }\n\n    if (!hasRowWithAutoHeight) {\n      firstColumnIndex = binarySearch(left, columnPositions);\n      lastColumnIndex = binarySearch(left + containerDimensions.width, columnPositions);\n    }\n\n    return {\n      firstRowIndex,\n      lastRowIndex,\n      firstColumnIndex,\n      lastColumnIndex\n    };\n  }, [disableVirtualization, getNearestIndexToRender, rowsMeta.positions.length, rootProps.autoHeight, rootProps.rowBuffer, currentPage.rows, columnPositions, visibleColumns.length, apiRef, containerDimensions]);\n  useEnhancedEffect(() => {\n    if (disableVirtualization) {\n      renderZoneRef.current.style.transform = `translate3d(0px, 0px, 0px)`;\n    } else {\n      // TODO a scroll reset should not be necessary\n      rootRef.current.scrollLeft = 0;\n      rootRef.current.scrollTop = 0;\n    }\n  }, [disableVirtualization]);\n  useEnhancedEffect(() => {\n    setContainerDimensions({\n      width: rootRef.current.clientWidth,\n      height: rootRef.current.clientHeight\n    });\n  }, [rowsMeta.currentPageTotalHeight]);\n  const handleResize = React.useCallback(params => {\n    setContainerDimensions({\n      width: params.width,\n      height: params.height\n    });\n  }, []);\n  useGridApiEventHandler(apiRef, 'resize', handleResize);\n  const updateRenderZonePosition = React.useCallback(nextRenderContext => {\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    const [initialFirstColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: renderZoneMinColumnIndex,\n      maxLastIndex: renderZoneMaxColumnIndex,\n      buffer: rootProps.columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const top = gridRowsMetaSelector(apiRef.current.state).positions[firstRowToRender];\n    const left = gridColumnPositionsSelector(apiRef)[firstColumnToRender]; // Call directly the selector because it might be outdated when this method is called\n\n    renderZoneRef.current.style.transform = `translate3d(${left}px, ${top}px, 0px)`;\n\n    if (typeof onRenderZonePositioning === 'function') {\n      onRenderZonePositioning({\n        top,\n        left\n      });\n    }\n  }, [apiRef, currentPage.rows, onRenderZonePositioning, renderZoneMinColumnIndex, renderZoneMaxColumnIndex, rootProps.columnBuffer, rootProps.rowBuffer]);\n  const updateRenderContext = React.useCallback(nextRenderContext => {\n    setRenderContext(nextRenderContext);\n    updateRenderZonePosition(nextRenderContext);\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    apiRef.current.publishEvent('renderedRowsIntervalChange', {\n      firstRowToRender,\n      lastRowToRender\n    });\n    prevRenderContext.current = nextRenderContext;\n  }, [apiRef, setRenderContext, prevRenderContext, currentPage.rows.length, rootProps.rowBuffer, updateRenderZonePosition]);\n  useEnhancedEffect(() => {\n    if (containerDimensions.width == null) {\n      return;\n    }\n\n    const initialRenderContext = computeRenderContext();\n    updateRenderContext(initialRenderContext);\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n    const params = {\n      top,\n      left,\n      renderContext: initialRenderContext\n    };\n    apiRef.current.publishEvent('rowsScroll', params);\n  }, [apiRef, computeRenderContext, containerDimensions.width, updateRenderContext]);\n\n  const handleScroll = event => {\n    const {\n      scrollTop,\n      scrollLeft\n    } = event.currentTarget;\n    scrollPosition.current.top = scrollTop;\n    scrollPosition.current.left = scrollLeft; // On iOS and macOS, negative offsets are possible when swiping past the start\n\n    if (scrollLeft < 0 || scrollTop < 0 || !prevRenderContext.current) {\n      return;\n    } // When virtualization is disabled, the context never changes during scroll\n\n\n    const nextRenderContext = disableVirtualization ? prevRenderContext.current : computeRenderContext();\n    const topRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstRowIndex - prevRenderContext.current.firstRowIndex);\n    const bottomRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastRowIndex - prevRenderContext.current.lastRowIndex);\n    const topColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstColumnIndex - prevRenderContext.current.firstColumnIndex);\n    const bottomColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastColumnIndex - prevRenderContext.current.lastColumnIndex);\n    const shouldSetState = topRowsScrolledSincePreviousRender >= rootProps.rowThreshold || bottomRowsScrolledSincePreviousRender >= rootProps.rowThreshold || topColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || bottomColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || prevTotalWidth.current !== columnsTotalWidth; // TODO v6: rename event to a wider name, it's not only fired for row scrolling\n\n    apiRef.current.publishEvent('rowsScroll', {\n      top: scrollTop,\n      left: scrollLeft,\n      renderContext: shouldSetState ? nextRenderContext : prevRenderContext.current\n    }, event);\n\n    if (shouldSetState) {\n      // Prevents batching render context changes\n      ReactDOM.flushSync(() => {\n        updateRenderContext(nextRenderContext);\n      });\n      prevTotalWidth.current = columnsTotalWidth;\n    }\n  };\n\n  const handleWheel = event => {\n    apiRef.current.publishEvent('virtualScrollerWheel', {}, event);\n  };\n\n  const handleTouchMove = event => {\n    apiRef.current.publishEvent('virtualScrollerTouchMove', {}, event);\n  };\n\n  const getRows = function () {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      renderContext\n    };\n    const {\n      renderContext: nextRenderContext,\n      minFirstColumn = renderZoneMinColumnIndex,\n      maxLastColumn = renderZoneMaxColumnIndex,\n      availableSpace = containerDimensions.width,\n      rowIndexOffset = 0,\n      position = 'center'\n    } = params;\n\n    if (!nextRenderContext || availableSpace == null) {\n      return null;\n    }\n\n    const rowBuffer = !disableVirtualization ? rootProps.rowBuffer : 0;\n    const columnBuffer = !disableVirtualization ? rootProps.columnBuffer : 0;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rowBuffer\n    });\n    const renderedRows = [];\n\n    if (params.rows) {\n      params.rows.forEach(row => {\n        renderedRows.push(row);\n        apiRef.current.unstable_calculateColSpan({\n          rowId: row.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      });\n    } else {\n      if (!currentPage.range) {\n        return null;\n      }\n\n      for (let i = firstRowToRender; i < lastRowToRender; i += 1) {\n        const row = currentPage.rows[i];\n        renderedRows.push(row);\n        apiRef.current.unstable_calculateColSpan({\n          rowId: row.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      }\n    }\n\n    const [initialFirstColumnToRender, lastColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: minFirstColumn,\n      maxLastIndex: maxLastColumn,\n      buffer: columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n    const rows = [];\n\n    for (let i = 0; i < renderedRows.length; i += 1) {\n      var _currentPage$range5, _rootProps$components;\n\n      const {\n        id,\n        model\n      } = renderedRows[i];\n      const lastVisibleRowIndex = firstRowToRender + i === currentPage.rows.length - 1;\n      const baseRowHeight = !apiRef.current.unstable_rowHasAutoHeight(id) ? apiRef.current.unstable_getRowHeight(id) : 'auto';\n      let isSelected;\n\n      if (selectedRowsLookup[id] == null) {\n        isSelected = false;\n      } else {\n        isSelected = apiRef.current.isRowSelectable(id);\n      }\n\n      rows.push( /*#__PURE__*/_jsx(rootProps.components.Row, _extends({\n        row: model,\n        rowId: id,\n        rowHeight: baseRowHeight,\n        cellFocus: cellFocus // TODO move to inside the row\n        ,\n        cellTabIndex: cellTabIndex // TODO move to inside the row\n        ,\n        editRowsState: editRowsState // TODO move to inside the row\n        ,\n        renderedColumns: renderedColumns,\n        visibleColumns: visibleColumns,\n        firstColumnToRender: firstColumnToRender,\n        lastColumnToRender: lastColumnToRender,\n        selected: isSelected,\n        index: rowIndexOffset + ((currentPage == null ? void 0 : (_currentPage$range5 = currentPage.range) == null ? void 0 : _currentPage$range5.firstRowIndex) || 0) + firstRowToRender + i,\n        containerWidth: availableSpace,\n        isLastVisible: lastVisibleRowIndex,\n        position: position\n      }, typeof getRowProps === 'function' ? getRowProps(id, model) : {}, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.row), id));\n    }\n\n    return rows;\n  };\n\n  const needsHorizontalScrollbar = containerDimensions.width && columnsTotalWidth > containerDimensions.width;\n  const contentSize = React.useMemo(() => {\n    // In cases where the columns exceed the available width,\n    // the horizontal scrollbar should be shown even when there're no rows.\n    // Keeping 1px as minimum height ensures that the scrollbar will visible if necessary.\n    const height = Math.max(rowsMeta.currentPageTotalHeight, 1);\n    let shouldExtendContent = false;\n\n    if (rootRef != null && rootRef.current && height <= (rootRef == null ? void 0 : rootRef.current.clientHeight)) {\n      shouldExtendContent = true;\n    }\n\n    const size = {\n      width: needsHorizontalScrollbar ? columnsTotalWidth : 'auto',\n      height,\n      minHeight: shouldExtendContent ? '100%' : 'auto'\n    };\n\n    if (rootProps.autoHeight && currentPage.rows.length === 0) {\n      size.height = 2 * rowHeight; // Give room to show the overlay when there's no row.\n    }\n\n    return size;\n  }, [rootRef, columnsTotalWidth, rowsMeta.currentPageTotalHeight, currentPage.rows.length, needsHorizontalScrollbar, rootProps.autoHeight, rowHeight]);\n  React.useEffect(() => {\n    apiRef.current.publishEvent('virtualScrollerContentSizeChange');\n  }, [apiRef, contentSize]);\n\n  if (rootProps.autoHeight && currentPage.rows.length === 0) {\n    contentSize.height = 2 * rowHeight; // Give room to show the overlay when there no rows.\n  }\n\n  const rootStyle = {};\n\n  if (!needsHorizontalScrollbar) {\n    rootStyle.overflowX = 'hidden';\n  }\n\n  if (rootProps.autoHeight) {\n    rootStyle.overflowY = 'hidden';\n  }\n\n  const getRenderContext = React.useCallback(() => {\n    return prevRenderContext.current;\n  }, []);\n  apiRef.current.unstable_getRenderContext = getRenderContext;\n  return {\n    renderContext,\n    updateRenderZonePosition,\n    getRows,\n    getRootProps: function () {\n      let _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      let {\n        style = {}\n      } = _ref,\n          other = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n      return _extends({\n        ref: handleRef,\n        onScroll: handleScroll,\n        onWheel: handleWheel,\n        onTouchMove: handleTouchMove,\n        style: _extends({}, style, rootStyle)\n      }, other);\n    },\n    getContentProps: function () {\n      let {\n        style = {}\n      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return {\n        style: _extends({}, style, contentSize)\n      };\n    },\n    getRenderZoneProps: () => ({\n      ref: renderZoneRef\n    })\n  };\n};","map":{"version":3,"sources":["C:/Users/dhruv/OneDrive/Desktop/Hotel booking App/admin/node_modules/@mui/x-data-grid/hooks/features/virtualization/useGridVirtualScroller.js"],"names":["_objectWithoutPropertiesLoose","_extends","_excluded","React","ReactDOM","useForkRef","unstable_useEnhancedEffect","useEnhancedEffect","useGridApiContext","useGridRootProps","useGridSelector","gridVisibleColumnDefinitionsSelector","gridColumnsTotalWidthSelector","gridColumnPositionsSelector","gridDensityRowHeightSelector","gridFocusCellSelector","gridTabIndexCellSelector","gridEditRowsStateSelector","useGridVisibleRows","useGridApiEventHandler","clamp","selectedIdsLookupSelector","gridRowsMetaSelector","getFirstNonSpannedColumnToRender","jsx","_jsx","binarySearch","offset","positions","sliceStart","sliceEnd","length","pivot","Math","floor","itemOffset","exponentialSearch","index","interval","min","getRenderableIndexes","firstIndex","lastIndex","buffer","minFirstIndex","maxLastIndex","useGridVirtualScroller","props","_currentPage$range3","_currentPage$range4","apiRef","rootProps","visibleColumns","ref","disableVirtualization","onRenderZonePositioning","renderZoneMinColumnIndex","renderZoneMaxColumnIndex","getRowProps","columnPositions","columnsTotalWidth","rowHeight","cellFocus","cellTabIndex","rowsMeta","editRowsState","selectedRowsLookup","currentPage","renderZoneRef","useRef","rootRef","handleRef","renderContext","setRenderContext","useState","prevRenderContext","scrollPosition","top","left","containerDimensions","setContainerDimensions","width","height","prevTotalWidth","getNearestIndexToRender","useCallback","_currentPage$range","_currentPage$range2","lastMeasuredIndexRelativeToAllRows","current","unstable_getLastMeasuredRowIndex","allRowsMeasured","Infinity","range","lastRowIndex","lastMeasuredIndexRelativeToCurrentPage","firstRowIndex","computeRenderContext","rows","firstColumnIndex","lastColumnIndex","autoHeight","hasRowWithAutoHeight","firstRowToRender","lastRowToRender","rowBuffer","i","row","unstable_rowHasAutoHeight","id","style","transform","scrollLeft","scrollTop","clientWidth","clientHeight","currentPageTotalHeight","handleResize","params","updateRenderZonePosition","nextRenderContext","initialFirstColumnToRender","columnBuffer","firstColumnToRender","visibleRows","state","updateRenderContext","publishEvent","initialRenderContext","handleScroll","event","currentTarget","topRowsScrolledSincePreviousRender","abs","bottomRowsScrolledSincePreviousRender","topColumnsScrolledSincePreviousRender","bottomColumnsScrolledSincePreviousRender","shouldSetState","rowThreshold","columnThreshold","flushSync","handleWheel","handleTouchMove","getRows","minFirstColumn","maxLastColumn","availableSpace","rowIndexOffset","position","renderedRows","forEach","push","unstable_calculateColSpan","rowId","columns","lastColumnToRender","renderedColumns","slice","_currentPage$range5","_rootProps$components","model","lastVisibleRowIndex","baseRowHeight","unstable_getRowHeight","isSelected","isRowSelectable","components","Row","selected","containerWidth","isLastVisible","componentsProps","needsHorizontalScrollbar","contentSize","useMemo","max","shouldExtendContent","size","minHeight","useEffect","rootStyle","overflowX","overflowY","getRenderContext","unstable_getRenderContext","getRootProps","_ref","other","onScroll","onWheel","onTouchMove","getContentProps","getRenderZoneProps"],"mappings":"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","sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"style\"];\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { useForkRef, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/material/utils';\nimport { useGridApiContext } from '../../utils/useGridApiContext';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnsTotalWidthSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridDensityRowHeightSelector } from '../density/densitySelector';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nimport { gridEditRowsStateSelector } from '../editRows/gridEditRowsSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { clamp } from '../../../utils/utils';\nimport { selectedIdsLookupSelector } from '../selection/gridSelectionSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getFirstNonSpannedColumnToRender } from '../columns/gridColumnsUtils'; // Uses binary search to avoid looping through all possible positions\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function binarySearch(offset, positions, sliceStart = 0, sliceEnd = positions.length) {\n  if (positions.length <= 0) {\n    return -1;\n  }\n\n  if (sliceStart >= sliceEnd) {\n    return sliceStart;\n  }\n\n  const pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);\n  const itemOffset = positions[pivot];\n  return offset <= itemOffset ? binarySearch(offset, positions, sliceStart, pivot) : binarySearch(offset, positions, pivot + 1, sliceEnd);\n}\n\nfunction exponentialSearch(offset, positions, index) {\n  let interval = 1;\n\n  while (index < positions.length && positions[index] < offset) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return binarySearch(offset, positions, Math.floor(index / 2), Math.min(index, positions.length));\n}\n\nexport const getRenderableIndexes = ({\n  firstIndex,\n  lastIndex,\n  buffer,\n  minFirstIndex,\n  maxLastIndex\n}) => {\n  return [clamp(firstIndex - buffer, minFirstIndex, maxLastIndex), clamp(lastIndex + buffer, minFirstIndex, maxLastIndex)];\n};\nexport const useGridVirtualScroller = props => {\n  var _currentPage$range3, _currentPage$range4;\n\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const {\n    ref,\n    disableVirtualization,\n    onRenderZonePositioning,\n    renderZoneMinColumnIndex = 0,\n    renderZoneMaxColumnIndex = visibleColumns.length,\n    getRowProps\n  } = props;\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const rowHeight = useGridSelector(apiRef, gridDensityRowHeightSelector);\n  const cellFocus = useGridSelector(apiRef, gridFocusCellSelector);\n  const cellTabIndex = useGridSelector(apiRef, gridTabIndexCellSelector);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const editRowsState = useGridSelector(apiRef, gridEditRowsStateSelector);\n  const selectedRowsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const renderZoneRef = React.useRef(null);\n  const rootRef = React.useRef(null);\n  const handleRef = useForkRef(ref, rootRef);\n  const [renderContext, setRenderContext] = React.useState(null);\n  const prevRenderContext = React.useRef(renderContext);\n  const scrollPosition = React.useRef({\n    top: 0,\n    left: 0\n  });\n  const [containerDimensions, setContainerDimensions] = React.useState({\n    width: null,\n    height: null\n  });\n  const prevTotalWidth = React.useRef(columnsTotalWidth);\n  const getNearestIndexToRender = React.useCallback(offset => {\n    var _currentPage$range, _currentPage$range2;\n\n    const lastMeasuredIndexRelativeToAllRows = apiRef.current.unstable_getLastMeasuredRowIndex();\n    let allRowsMeasured = lastMeasuredIndexRelativeToAllRows === Infinity;\n\n    if ((_currentPage$range = currentPage.range) != null && _currentPage$range.lastRowIndex && !allRowsMeasured) {\n      // Check if all rows in this page are already measured\n      allRowsMeasured = lastMeasuredIndexRelativeToAllRows >= currentPage.range.lastRowIndex;\n    }\n\n    const lastMeasuredIndexRelativeToCurrentPage = clamp(lastMeasuredIndexRelativeToAllRows - (((_currentPage$range2 = currentPage.range) == null ? void 0 : _currentPage$range2.firstRowIndex) || 0), 0, rowsMeta.positions.length);\n\n    if (allRowsMeasured || rowsMeta.positions[lastMeasuredIndexRelativeToCurrentPage] >= offset) {\n      // If all rows were measured (when no row has \"auto\" as height) or all rows before the offset\n      // were measured, then use a binary search because it's faster.\n      return binarySearch(offset, rowsMeta.positions);\n    } // Otherwise, use an exponential search.\n    // If rows have \"auto\" as height, their positions will be based on estimated heights.\n    // In this case, we can skip several steps until we find a position higher than the offset.\n    // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n\n\n    return exponentialSearch(offset, rowsMeta.positions, lastMeasuredIndexRelativeToCurrentPage);\n  }, [apiRef, (_currentPage$range3 = currentPage.range) == null ? void 0 : _currentPage$range3.firstRowIndex, (_currentPage$range4 = currentPage.range) == null ? void 0 : _currentPage$range4.lastRowIndex, rowsMeta.positions]);\n  const computeRenderContext = React.useCallback(() => {\n    if (disableVirtualization) {\n      return {\n        firstRowIndex: 0,\n        lastRowIndex: currentPage.rows.length,\n        firstColumnIndex: 0,\n        lastColumnIndex: visibleColumns.length\n      };\n    }\n\n    const {\n      top,\n      left\n    } = scrollPosition.current; // Clamp the value because the search may return an index out of bounds.\n    // In the last index, this is not needed because Array.slice doesn't include it.\n\n    const firstRowIndex = Math.min(getNearestIndexToRender(top), rowsMeta.positions.length - 1);\n    const lastRowIndex = rootProps.autoHeight ? firstRowIndex + currentPage.rows.length : getNearestIndexToRender(top + containerDimensions.height);\n    let hasRowWithAutoHeight = false;\n    let firstColumnIndex = 0;\n    let lastColumnIndex = columnPositions.length;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: firstRowIndex,\n      lastIndex: lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n\n    for (let i = firstRowToRender; i < lastRowToRender && !hasRowWithAutoHeight; i += 1) {\n      const row = currentPage.rows[i];\n      hasRowWithAutoHeight = apiRef.current.unstable_rowHasAutoHeight(row.id);\n    }\n\n    if (!hasRowWithAutoHeight) {\n      firstColumnIndex = binarySearch(left, columnPositions);\n      lastColumnIndex = binarySearch(left + containerDimensions.width, columnPositions);\n    }\n\n    return {\n      firstRowIndex,\n      lastRowIndex,\n      firstColumnIndex,\n      lastColumnIndex\n    };\n  }, [disableVirtualization, getNearestIndexToRender, rowsMeta.positions.length, rootProps.autoHeight, rootProps.rowBuffer, currentPage.rows, columnPositions, visibleColumns.length, apiRef, containerDimensions]);\n  useEnhancedEffect(() => {\n    if (disableVirtualization) {\n      renderZoneRef.current.style.transform = `translate3d(0px, 0px, 0px)`;\n    } else {\n      // TODO a scroll reset should not be necessary\n      rootRef.current.scrollLeft = 0;\n      rootRef.current.scrollTop = 0;\n    }\n  }, [disableVirtualization]);\n  useEnhancedEffect(() => {\n    setContainerDimensions({\n      width: rootRef.current.clientWidth,\n      height: rootRef.current.clientHeight\n    });\n  }, [rowsMeta.currentPageTotalHeight]);\n  const handleResize = React.useCallback(params => {\n    setContainerDimensions({\n      width: params.width,\n      height: params.height\n    });\n  }, []);\n  useGridApiEventHandler(apiRef, 'resize', handleResize);\n  const updateRenderZonePosition = React.useCallback(nextRenderContext => {\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    const [initialFirstColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: renderZoneMinColumnIndex,\n      maxLastIndex: renderZoneMaxColumnIndex,\n      buffer: rootProps.columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const top = gridRowsMetaSelector(apiRef.current.state).positions[firstRowToRender];\n    const left = gridColumnPositionsSelector(apiRef)[firstColumnToRender]; // Call directly the selector because it might be outdated when this method is called\n\n    renderZoneRef.current.style.transform = `translate3d(${left}px, ${top}px, 0px)`;\n\n    if (typeof onRenderZonePositioning === 'function') {\n      onRenderZonePositioning({\n        top,\n        left\n      });\n    }\n  }, [apiRef, currentPage.rows, onRenderZonePositioning, renderZoneMinColumnIndex, renderZoneMaxColumnIndex, rootProps.columnBuffer, rootProps.rowBuffer]);\n  const updateRenderContext = React.useCallback(nextRenderContext => {\n    setRenderContext(nextRenderContext);\n    updateRenderZonePosition(nextRenderContext);\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    apiRef.current.publishEvent('renderedRowsIntervalChange', {\n      firstRowToRender,\n      lastRowToRender\n    });\n    prevRenderContext.current = nextRenderContext;\n  }, [apiRef, setRenderContext, prevRenderContext, currentPage.rows.length, rootProps.rowBuffer, updateRenderZonePosition]);\n  useEnhancedEffect(() => {\n    if (containerDimensions.width == null) {\n      return;\n    }\n\n    const initialRenderContext = computeRenderContext();\n    updateRenderContext(initialRenderContext);\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n    const params = {\n      top,\n      left,\n      renderContext: initialRenderContext\n    };\n    apiRef.current.publishEvent('rowsScroll', params);\n  }, [apiRef, computeRenderContext, containerDimensions.width, updateRenderContext]);\n\n  const handleScroll = event => {\n    const {\n      scrollTop,\n      scrollLeft\n    } = event.currentTarget;\n    scrollPosition.current.top = scrollTop;\n    scrollPosition.current.left = scrollLeft; // On iOS and macOS, negative offsets are possible when swiping past the start\n\n    if (scrollLeft < 0 || scrollTop < 0 || !prevRenderContext.current) {\n      return;\n    } // When virtualization is disabled, the context never changes during scroll\n\n\n    const nextRenderContext = disableVirtualization ? prevRenderContext.current : computeRenderContext();\n    const topRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstRowIndex - prevRenderContext.current.firstRowIndex);\n    const bottomRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastRowIndex - prevRenderContext.current.lastRowIndex);\n    const topColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstColumnIndex - prevRenderContext.current.firstColumnIndex);\n    const bottomColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastColumnIndex - prevRenderContext.current.lastColumnIndex);\n    const shouldSetState = topRowsScrolledSincePreviousRender >= rootProps.rowThreshold || bottomRowsScrolledSincePreviousRender >= rootProps.rowThreshold || topColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || bottomColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || prevTotalWidth.current !== columnsTotalWidth; // TODO v6: rename event to a wider name, it's not only fired for row scrolling\n\n    apiRef.current.publishEvent('rowsScroll', {\n      top: scrollTop,\n      left: scrollLeft,\n      renderContext: shouldSetState ? nextRenderContext : prevRenderContext.current\n    }, event);\n\n    if (shouldSetState) {\n      // Prevents batching render context changes\n      ReactDOM.flushSync(() => {\n        updateRenderContext(nextRenderContext);\n      });\n      prevTotalWidth.current = columnsTotalWidth;\n    }\n  };\n\n  const handleWheel = event => {\n    apiRef.current.publishEvent('virtualScrollerWheel', {}, event);\n  };\n\n  const handleTouchMove = event => {\n    apiRef.current.publishEvent('virtualScrollerTouchMove', {}, event);\n  };\n\n  const getRows = (params = {\n    renderContext\n  }) => {\n    const {\n      renderContext: nextRenderContext,\n      minFirstColumn = renderZoneMinColumnIndex,\n      maxLastColumn = renderZoneMaxColumnIndex,\n      availableSpace = containerDimensions.width,\n      rowIndexOffset = 0,\n      position = 'center'\n    } = params;\n\n    if (!nextRenderContext || availableSpace == null) {\n      return null;\n    }\n\n    const rowBuffer = !disableVirtualization ? rootProps.rowBuffer : 0;\n    const columnBuffer = !disableVirtualization ? rootProps.columnBuffer : 0;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rowBuffer\n    });\n    const renderedRows = [];\n\n    if (params.rows) {\n      params.rows.forEach(row => {\n        renderedRows.push(row);\n        apiRef.current.unstable_calculateColSpan({\n          rowId: row.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      });\n    } else {\n      if (!currentPage.range) {\n        return null;\n      }\n\n      for (let i = firstRowToRender; i < lastRowToRender; i += 1) {\n        const row = currentPage.rows[i];\n        renderedRows.push(row);\n        apiRef.current.unstable_calculateColSpan({\n          rowId: row.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      }\n    }\n\n    const [initialFirstColumnToRender, lastColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: minFirstColumn,\n      maxLastIndex: maxLastColumn,\n      buffer: columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n    const rows = [];\n\n    for (let i = 0; i < renderedRows.length; i += 1) {\n      var _currentPage$range5, _rootProps$components;\n\n      const {\n        id,\n        model\n      } = renderedRows[i];\n      const lastVisibleRowIndex = firstRowToRender + i === currentPage.rows.length - 1;\n      const baseRowHeight = !apiRef.current.unstable_rowHasAutoHeight(id) ? apiRef.current.unstable_getRowHeight(id) : 'auto';\n      let isSelected;\n\n      if (selectedRowsLookup[id] == null) {\n        isSelected = false;\n      } else {\n        isSelected = apiRef.current.isRowSelectable(id);\n      }\n\n      rows.push( /*#__PURE__*/_jsx(rootProps.components.Row, _extends({\n        row: model,\n        rowId: id,\n        rowHeight: baseRowHeight,\n        cellFocus: cellFocus // TODO move to inside the row\n        ,\n        cellTabIndex: cellTabIndex // TODO move to inside the row\n        ,\n        editRowsState: editRowsState // TODO move to inside the row\n        ,\n        renderedColumns: renderedColumns,\n        visibleColumns: visibleColumns,\n        firstColumnToRender: firstColumnToRender,\n        lastColumnToRender: lastColumnToRender,\n        selected: isSelected,\n        index: rowIndexOffset + ((currentPage == null ? void 0 : (_currentPage$range5 = currentPage.range) == null ? void 0 : _currentPage$range5.firstRowIndex) || 0) + firstRowToRender + i,\n        containerWidth: availableSpace,\n        isLastVisible: lastVisibleRowIndex,\n        position: position\n      }, typeof getRowProps === 'function' ? getRowProps(id, model) : {}, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.row), id));\n    }\n\n    return rows;\n  };\n\n  const needsHorizontalScrollbar = containerDimensions.width && columnsTotalWidth > containerDimensions.width;\n  const contentSize = React.useMemo(() => {\n    // In cases where the columns exceed the available width,\n    // the horizontal scrollbar should be shown even when there're no rows.\n    // Keeping 1px as minimum height ensures that the scrollbar will visible if necessary.\n    const height = Math.max(rowsMeta.currentPageTotalHeight, 1);\n    let shouldExtendContent = false;\n\n    if (rootRef != null && rootRef.current && height <= (rootRef == null ? void 0 : rootRef.current.clientHeight)) {\n      shouldExtendContent = true;\n    }\n\n    const size = {\n      width: needsHorizontalScrollbar ? columnsTotalWidth : 'auto',\n      height,\n      minHeight: shouldExtendContent ? '100%' : 'auto'\n    };\n\n    if (rootProps.autoHeight && currentPage.rows.length === 0) {\n      size.height = 2 * rowHeight; // Give room to show the overlay when there's no row.\n    }\n\n    return size;\n  }, [rootRef, columnsTotalWidth, rowsMeta.currentPageTotalHeight, currentPage.rows.length, needsHorizontalScrollbar, rootProps.autoHeight, rowHeight]);\n  React.useEffect(() => {\n    apiRef.current.publishEvent('virtualScrollerContentSizeChange');\n  }, [apiRef, contentSize]);\n\n  if (rootProps.autoHeight && currentPage.rows.length === 0) {\n    contentSize.height = 2 * rowHeight; // Give room to show the overlay when there no rows.\n  }\n\n  const rootStyle = {};\n\n  if (!needsHorizontalScrollbar) {\n    rootStyle.overflowX = 'hidden';\n  }\n\n  if (rootProps.autoHeight) {\n    rootStyle.overflowY = 'hidden';\n  }\n\n  const getRenderContext = React.useCallback(() => {\n    return prevRenderContext.current;\n  }, []);\n  apiRef.current.unstable_getRenderContext = getRenderContext;\n  return {\n    renderContext,\n    updateRenderZonePosition,\n    getRows,\n    getRootProps: (_ref = {}) => {\n      let {\n        style = {}\n      } = _ref,\n          other = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n      return _extends({\n        ref: handleRef,\n        onScroll: handleScroll,\n        onWheel: handleWheel,\n        onTouchMove: handleTouchMove,\n        style: _extends({}, style, rootStyle)\n      }, other);\n    },\n    getContentProps: ({\n      style = {}\n    } = {}) => ({\n      style: _extends({}, style, contentSize)\n    }),\n    getRenderZoneProps: () => ({\n      ref: renderZoneRef\n    })\n  };\n};"]},"metadata":{},"sourceType":"module"}