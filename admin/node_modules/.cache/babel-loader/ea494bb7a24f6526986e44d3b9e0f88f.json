{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { ownerDocument } from '@mui/material/utils';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridVisibleRowCountSelector } from '../filter/gridFilterSelector';\nimport { gridColumnDefinitionsSelector, gridColumnVisibilityModelSelector } from '../columns/gridColumnsSelector';\nimport { gridDensityTotalHeaderHeightSelector } from '../density/densitySelector';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getColumnsToExport } from './utils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GridPrintExportMenuItem } from '../../../components/toolbar/GridToolbarExport';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction raf() {\n  return new Promise(resolve => {\n    requestAnimationFrame(() => {\n      resolve();\n    });\n  });\n}\n\nfunction getChromeVersion() {\n  const raw = navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./);\n  return raw ? parseInt(raw[2], 10) : null;\n}\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridParamsApi (method)\n */\n\n\nexport const useGridPrintExport = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridPrintExport');\n  const doc = React.useRef(null);\n  const previousGridState = React.useRef(null);\n  const previousColumnVisibility = React.useRef({});\n  React.useEffect(() => {\n    doc.current = ownerDocument(apiRef.current.rootElementRef.current);\n  }, [apiRef]); // Returns a promise because updateColumns triggers state update and\n  // the new state needs to be in place before the grid can be sized correctly\n\n  const updateGridColumnsForPrint = React.useCallback((fields, allColumns) => new Promise(resolve => {\n    // TODO remove unused Promise\n    if (!fields && !allColumns) {\n      resolve();\n      return;\n    }\n\n    const exportedColumnFields = getColumnsToExport({\n      apiRef,\n      options: {\n        fields,\n        allColumns\n      }\n    }).map(column => column.field);\n    const columns = gridColumnDefinitionsSelector(apiRef);\n    const newColumnVisibilityModel = {};\n    columns.forEach(column => {\n      newColumnVisibilityModel[column.field] = exportedColumnFields.includes(column.field);\n    });\n    apiRef.current.setColumnVisibilityModel(newColumnVisibilityModel);\n    resolve();\n  }), [apiRef]); // TODO move outside of this scope and remove React.useCallback\n\n  const buildPrintWindow = React.useCallback(title => {\n    const iframeEl = document.createElement('iframe');\n    iframeEl.style.position = 'absolute';\n    iframeEl.style.width = '0px';\n    iframeEl.style.height = '0px';\n    iframeEl.title = title || document.title;\n    return iframeEl;\n  }, []);\n  const handlePrintWindowLoad = React.useCallback((printWindow, options) => {\n    var _querySelector, _querySelector2;\n\n    const normalizeOptions = _extends({\n      copyStyles: true,\n      hideToolbar: false,\n      hideFooter: false\n    }, options);\n\n    const printDoc = printWindow.contentDocument;\n\n    if (!printDoc) {\n      return;\n    }\n\n    const totalHeaderHeight = gridDensityTotalHeaderHeightSelector(apiRef);\n    const rowsMeta = gridRowsMetaSelector(apiRef.current.state);\n    const gridRootElement = apiRef.current.rootElementRef.current;\n    const gridClone = gridRootElement.cloneNode(true);\n    const gridCloneViewport = gridClone.querySelector(`.${gridClasses.virtualScroller}`); // Expand the viewport window to prevent clipping\n\n    gridCloneViewport.style.height = 'auto';\n    gridCloneViewport.style.width = 'auto';\n    gridCloneViewport.parentElement.style.width = 'auto';\n    gridCloneViewport.parentElement.style.height = 'auto'; // Allow to overflow to not hide the border of the last row\n\n    const gridMain = gridClone.querySelector(`.${gridClasses.main}`);\n    gridMain.style.overflow = 'visible';\n    const chromeVersion = getChromeVersion();\n\n    if (chromeVersion && chromeVersion >= 108) {\n      // See https://support.google.com/chrome/thread/191619088?hl=en&msgid=193009642\n      gridClone.style.contain = 'size';\n    }\n\n    const columnHeaders = gridClone.querySelector(`.${gridClasses.columnHeaders}`);\n    const columnHeadersInner = columnHeaders.querySelector(`.${gridClasses.columnHeadersInner}`);\n    columnHeadersInner.style.width = '100%';\n    let gridToolbarElementHeight = ((_querySelector = gridRootElement.querySelector(`.${gridClasses.toolbarContainer}`)) == null ? void 0 : _querySelector.clientHeight) || 0;\n    let gridFooterElementHeight = ((_querySelector2 = gridRootElement.querySelector(`.${gridClasses.footerContainer}`)) == null ? void 0 : _querySelector2.clientHeight) || 0;\n\n    if (normalizeOptions.hideToolbar) {\n      var _gridClone$querySelec;\n\n      (_gridClone$querySelec = gridClone.querySelector(`.${gridClasses.toolbarContainer}`)) == null ? void 0 : _gridClone$querySelec.remove();\n      gridToolbarElementHeight = 0;\n    }\n\n    if (normalizeOptions.hideFooter) {\n      var _gridClone$querySelec2;\n\n      (_gridClone$querySelec2 = gridClone.querySelector(`.${gridClasses.footerContainer}`)) == null ? void 0 : _gridClone$querySelec2.remove();\n      gridFooterElementHeight = 0;\n    } // Expand container height to accommodate all rows\n\n\n    gridClone.style.height = `${rowsMeta.currentPageTotalHeight + totalHeaderHeight + gridToolbarElementHeight + gridFooterElementHeight}px`; // printDoc.body.appendChild(gridClone); should be enough but a clone isolation bug in Safari\n    // prevents us to do it\n\n    const container = document.createElement('div');\n    container.appendChild(gridClone);\n    printDoc.body.innerHTML = container.innerHTML;\n    const defaultPageStyle = typeof normalizeOptions.pageStyle === 'function' ? normalizeOptions.pageStyle() : normalizeOptions.pageStyle;\n\n    if (typeof defaultPageStyle === 'string') {\n      // TODO custom styles should always win\n      const styleElement = printDoc.createElement('style');\n      styleElement.appendChild(printDoc.createTextNode(defaultPageStyle));\n      printDoc.head.appendChild(styleElement);\n    }\n\n    if (normalizeOptions.bodyClassName) {\n      printDoc.body.classList.add(...normalizeOptions.bodyClassName.split(' '));\n    }\n\n    if (normalizeOptions.copyStyles) {\n      const headStyleElements = doc.current.querySelectorAll(\"style, link[rel='stylesheet']\");\n\n      for (let i = 0; i < headStyleElements.length; i += 1) {\n        const node = headStyleElements[i];\n\n        if (node.tagName === 'STYLE') {\n          const newHeadStyleElements = printDoc.createElement(node.tagName);\n          const sheet = node.sheet;\n\n          if (sheet) {\n            let styleCSS = ''; // NOTE: for-of is not supported by IE\n\n            for (let j = 0; j < sheet.cssRules.length; j += 1) {\n              if (typeof sheet.cssRules[j].cssText === 'string') {\n                styleCSS += `${sheet.cssRules[j].cssText}\\r\\n`;\n              }\n            }\n\n            newHeadStyleElements.appendChild(printDoc.createTextNode(styleCSS));\n            printDoc.head.appendChild(newHeadStyleElements);\n          }\n        } else if (node.getAttribute('href')) {\n          // If `href` tag is empty, avoid loading these links\n          const newHeadStyleElements = printDoc.createElement(node.tagName);\n\n          for (let j = 0; j < node.attributes.length; j += 1) {\n            const attr = node.attributes[j];\n\n            if (attr) {\n              newHeadStyleElements.setAttribute(attr.nodeName, attr.nodeValue || '');\n            }\n          }\n\n          printDoc.head.appendChild(newHeadStyleElements);\n        }\n      }\n    } // Trigger print\n\n\n    if (process.env.NODE_ENV !== 'test') {\n      printWindow.contentWindow.print();\n    }\n  }, [apiRef, doc]);\n  const handlePrintWindowAfterPrint = React.useCallback(printWindow => {\n    var _previousGridState$cu, _previousGridState$cu2; // Remove the print iframe\n\n\n    doc.current.body.removeChild(printWindow); // Revert grid to previous state\n\n    apiRef.current.restoreState(previousGridState.current || {});\n\n    if (!((_previousGridState$cu = previousGridState.current) != null && (_previousGridState$cu2 = _previousGridState$cu.columns) != null && _previousGridState$cu2.columnVisibilityModel)) {\n      // if the apiRef.current.exportState(); did not exported the column visibility, we update it\n      apiRef.current.setColumnVisibilityModel(previousColumnVisibility.current);\n    }\n\n    apiRef.current.unstable_enableVirtualization(); // Clear local state\n\n    previousGridState.current = null;\n    previousColumnVisibility.current = {};\n  }, [apiRef]);\n  const exportDataAsPrint = React.useCallback(async options => {\n    logger.debug(`Export data as Print`);\n\n    if (!apiRef.current.rootElementRef.current) {\n      throw new Error('MUI: No grid root element available.');\n    }\n\n    previousGridState.current = apiRef.current.exportState(); // It appends that the visibility model is not exported, especially if columnVisibility is not controlled\n\n    previousColumnVisibility.current = gridColumnVisibilityModelSelector(apiRef);\n\n    if (props.pagination) {\n      const visibleRowCount = gridVisibleRowCountSelector(apiRef);\n      apiRef.current.setPageSize(visibleRowCount);\n    }\n\n    await updateGridColumnsForPrint(options == null ? void 0 : options.fields, options == null ? void 0 : options.allColumns);\n    apiRef.current.unstable_disableVirtualization();\n    await raf(); // wait for the state changes to take action\n\n    const printWindow = buildPrintWindow(options == null ? void 0 : options.fileName);\n\n    if (process.env.NODE_ENV === 'test') {\n      doc.current.body.appendChild(printWindow); // In test env, run the all pipeline without waiting for loading\n\n      handlePrintWindowLoad(printWindow, options);\n      handlePrintWindowAfterPrint(printWindow);\n    } else {\n      printWindow.onload = () => {\n        handlePrintWindowLoad(printWindow, options);\n        const mediaQueryList = printWindow.contentWindow.matchMedia('print');\n        mediaQueryList.addEventListener('change', mql => {\n          const isAfterPrint = mql.matches === false;\n\n          if (isAfterPrint) {\n            handlePrintWindowAfterPrint(printWindow);\n          }\n        });\n      };\n\n      doc.current.body.appendChild(printWindow);\n    }\n  }, [props, logger, apiRef, buildPrintWindow, handlePrintWindowLoad, handlePrintWindowAfterPrint, updateGridColumnsForPrint]);\n  const printExportApi = {\n    exportDataAsPrint\n  };\n  useGridApiMethod(apiRef, printExportApi, 'GridPrintExportApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const addExportMenuButtons = React.useCallback((initialValue, options) => {\n    var _options$printOptions;\n\n    if ((_options$printOptions = options.printOptions) != null && _options$printOptions.disableToolbarButton) {\n      return initialValue;\n    }\n\n    return [...initialValue, {\n      component: /*#__PURE__*/_jsx(GridPrintExportMenuItem, {\n        options: options.printOptions\n      }),\n      componentName: 'printExport'\n    }];\n  }, []);\n  useGridRegisterPipeProcessor(apiRef, 'exportMenu', addExportMenuButtons);\n};","map":{"version":3,"sources":["C:/Users/dhruv/OneDrive/Desktop/Hotel booking App/admin/node_modules/@mui/x-data-grid/hooks/features/export/useGridPrintExport.js"],"names":["_extends","React","ownerDocument","useGridLogger","gridVisibleRowCountSelector","gridColumnDefinitionsSelector","gridColumnVisibilityModelSelector","gridDensityTotalHeaderHeightSelector","gridClasses","useGridApiMethod","gridRowsMetaSelector","getColumnsToExport","useGridRegisterPipeProcessor","GridPrintExportMenuItem","jsx","_jsx","raf","Promise","resolve","requestAnimationFrame","getChromeVersion","raw","navigator","userAgent","match","parseInt","useGridPrintExport","apiRef","props","logger","doc","useRef","previousGridState","previousColumnVisibility","useEffect","current","rootElementRef","updateGridColumnsForPrint","useCallback","fields","allColumns","exportedColumnFields","options","map","column","field","columns","newColumnVisibilityModel","forEach","includes","setColumnVisibilityModel","buildPrintWindow","title","iframeEl","document","createElement","style","position","width","height","handlePrintWindowLoad","printWindow","_querySelector","_querySelector2","normalizeOptions","copyStyles","hideToolbar","hideFooter","printDoc","contentDocument","totalHeaderHeight","rowsMeta","state","gridRootElement","gridClone","cloneNode","gridCloneViewport","querySelector","virtualScroller","parentElement","gridMain","main","overflow","chromeVersion","contain","columnHeaders","columnHeadersInner","gridToolbarElementHeight","toolbarContainer","clientHeight","gridFooterElementHeight","footerContainer","_gridClone$querySelec","remove","_gridClone$querySelec2","currentPageTotalHeight","container","appendChild","body","innerHTML","defaultPageStyle","pageStyle","styleElement","createTextNode","head","bodyClassName","classList","add","split","headStyleElements","querySelectorAll","i","length","node","tagName","newHeadStyleElements","sheet","styleCSS","j","cssRules","cssText","getAttribute","attributes","attr","setAttribute","nodeName","nodeValue","process","env","NODE_ENV","contentWindow","print","handlePrintWindowAfterPrint","_previousGridState$cu","_previousGridState$cu2","removeChild","restoreState","columnVisibilityModel","unstable_enableVirtualization","exportDataAsPrint","debug","Error","exportState","pagination","visibleRowCount","setPageSize","unstable_disableVirtualization","fileName","onload","mediaQueryList","matchMedia","addEventListener","mql","isAfterPrint","matches","printExportApi","addExportMenuButtons","initialValue","_options$printOptions","printOptions","disableToolbarButton","component","componentName"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,QAA8B,qBAA9B;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAASC,2BAAT,QAA4C,8BAA5C;AACA,SAASC,6BAAT,EAAwCC,iCAAxC,QAAiF,gCAAjF;AACA,SAASC,oCAAT,QAAqD,4BAArD;AACA,SAASC,WAAT,QAA4B,gCAA5B;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,SAASC,oBAAT,QAAqC,8BAArC;AACA,SAASC,kBAAT,QAAmC,SAAnC;AACA,SAASC,4BAAT,QAA6C,2BAA7C;AACA,SAASC,uBAAT,QAAwC,+CAAxC;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;;AAEA,SAASC,GAAT,GAAe;AACb,SAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAC5BC,IAAAA,qBAAqB,CAAC,MAAM;AAC1BD,MAAAA,OAAO;AACR,KAFoB,CAArB;AAGD,GAJM,CAAP;AAKD;;AAED,SAASE,gBAAT,GAA4B;AAC1B,QAAMC,GAAG,GAAGC,SAAS,CAACC,SAAV,CAAoBC,KAApB,CAA0B,0BAA1B,CAAZ;AACA,SAAOH,GAAG,GAAGI,QAAQ,CAACJ,GAAG,CAAC,CAAD,CAAJ,EAAS,EAAT,CAAX,GAA0B,IAApC;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAMK,kBAAkB,GAAG,CAACC,MAAD,EAASC,KAAT,KAAmB;AACnD,QAAMC,MAAM,GAAG1B,aAAa,CAACwB,MAAD,EAAS,oBAAT,CAA5B;AACA,QAAMG,GAAG,GAAG7B,KAAK,CAAC8B,MAAN,CAAa,IAAb,CAAZ;AACA,QAAMC,iBAAiB,GAAG/B,KAAK,CAAC8B,MAAN,CAAa,IAAb,CAA1B;AACA,QAAME,wBAAwB,GAAGhC,KAAK,CAAC8B,MAAN,CAAa,EAAb,CAAjC;AACA9B,EAAAA,KAAK,CAACiC,SAAN,CAAgB,MAAM;AACpBJ,IAAAA,GAAG,CAACK,OAAJ,GAAcjC,aAAa,CAACyB,MAAM,CAACQ,OAAP,CAAeC,cAAf,CAA8BD,OAA/B,CAA3B;AACD,GAFD,EAEG,CAACR,MAAD,CAFH,EALmD,CAOrC;AACd;;AAEA,QAAMU,yBAAyB,GAAGpC,KAAK,CAACqC,WAAN,CAAkB,CAACC,MAAD,EAASC,UAAT,KAAwB,IAAIvB,OAAJ,CAAYC,OAAO,IAAI;AACjG;AACA,QAAI,CAACqB,MAAD,IAAW,CAACC,UAAhB,EAA4B;AAC1BtB,MAAAA,OAAO;AACP;AACD;;AAED,UAAMuB,oBAAoB,GAAG9B,kBAAkB,CAAC;AAC9CgB,MAAAA,MAD8C;AAE9Ce,MAAAA,OAAO,EAAE;AACPH,QAAAA,MADO;AAEPC,QAAAA;AAFO;AAFqC,KAAD,CAAlB,CAM1BG,GAN0B,CAMtBC,MAAM,IAAIA,MAAM,CAACC,KANK,CAA7B;AAOA,UAAMC,OAAO,GAAGzC,6BAA6B,CAACsB,MAAD,CAA7C;AACA,UAAMoB,wBAAwB,GAAG,EAAjC;AACAD,IAAAA,OAAO,CAACE,OAAR,CAAgBJ,MAAM,IAAI;AACxBG,MAAAA,wBAAwB,CAACH,MAAM,CAACC,KAAR,CAAxB,GAAyCJ,oBAAoB,CAACQ,QAArB,CAA8BL,MAAM,CAACC,KAArC,CAAzC;AACD,KAFD;AAGAlB,IAAAA,MAAM,CAACQ,OAAP,CAAee,wBAAf,CAAwCH,wBAAxC;AACA7B,IAAAA,OAAO;AACR,GArB2E,CAA1C,EAqB9B,CAACS,MAAD,CArB8B,CAAlC,CAVmD,CA+BpC;;AAEf,QAAMwB,gBAAgB,GAAGlD,KAAK,CAACqC,WAAN,CAAkBc,KAAK,IAAI;AAClD,UAAMC,QAAQ,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAjB;AACAF,IAAAA,QAAQ,CAACG,KAAT,CAAeC,QAAf,GAA0B,UAA1B;AACAJ,IAAAA,QAAQ,CAACG,KAAT,CAAeE,KAAf,GAAuB,KAAvB;AACAL,IAAAA,QAAQ,CAACG,KAAT,CAAeG,MAAf,GAAwB,KAAxB;AACAN,IAAAA,QAAQ,CAACD,KAAT,GAAiBA,KAAK,IAAIE,QAAQ,CAACF,KAAnC;AACA,WAAOC,QAAP;AACD,GAPwB,EAOtB,EAPsB,CAAzB;AAQA,QAAMO,qBAAqB,GAAG3D,KAAK,CAACqC,WAAN,CAAkB,CAACuB,WAAD,EAAcnB,OAAd,KAA0B;AACxE,QAAIoB,cAAJ,EAAoBC,eAApB;;AAEA,UAAMC,gBAAgB,GAAGhE,QAAQ,CAAC;AAChCiE,MAAAA,UAAU,EAAE,IADoB;AAEhCC,MAAAA,WAAW,EAAE,KAFmB;AAGhCC,MAAAA,UAAU,EAAE;AAHoB,KAAD,EAI9BzB,OAJ8B,CAAjC;;AAMA,UAAM0B,QAAQ,GAAGP,WAAW,CAACQ,eAA7B;;AAEA,QAAI,CAACD,QAAL,EAAe;AACb;AACD;;AAED,UAAME,iBAAiB,GAAG/D,oCAAoC,CAACoB,MAAD,CAA9D;AACA,UAAM4C,QAAQ,GAAG7D,oBAAoB,CAACiB,MAAM,CAACQ,OAAP,CAAeqC,KAAhB,CAArC;AACA,UAAMC,eAAe,GAAG9C,MAAM,CAACQ,OAAP,CAAeC,cAAf,CAA8BD,OAAtD;AACA,UAAMuC,SAAS,GAAGD,eAAe,CAACE,SAAhB,CAA0B,IAA1B,CAAlB;AACA,UAAMC,iBAAiB,GAAGF,SAAS,CAACG,aAAV,CAAyB,IAAGrE,WAAW,CAACsE,eAAgB,EAAxD,CAA1B,CAnBwE,CAmBc;;AAEtFF,IAAAA,iBAAiB,CAACpB,KAAlB,CAAwBG,MAAxB,GAAiC,MAAjC;AACAiB,IAAAA,iBAAiB,CAACpB,KAAlB,CAAwBE,KAAxB,GAAgC,MAAhC;AACAkB,IAAAA,iBAAiB,CAACG,aAAlB,CAAgCvB,KAAhC,CAAsCE,KAAtC,GAA8C,MAA9C;AACAkB,IAAAA,iBAAiB,CAACG,aAAlB,CAAgCvB,KAAhC,CAAsCG,MAAtC,GAA+C,MAA/C,CAxBwE,CAwBjB;;AAEvD,UAAMqB,QAAQ,GAAGN,SAAS,CAACG,aAAV,CAAyB,IAAGrE,WAAW,CAACyE,IAAK,EAA7C,CAAjB;AACAD,IAAAA,QAAQ,CAACxB,KAAT,CAAe0B,QAAf,GAA0B,SAA1B;AACA,UAAMC,aAAa,GAAG/D,gBAAgB,EAAtC;;AAEA,QAAI+D,aAAa,IAAIA,aAAa,IAAI,GAAtC,EAA2C;AACzC;AACAT,MAAAA,SAAS,CAAClB,KAAV,CAAgB4B,OAAhB,GAA0B,MAA1B;AACD;;AAED,UAAMC,aAAa,GAAGX,SAAS,CAACG,aAAV,CAAyB,IAAGrE,WAAW,CAAC6E,aAAc,EAAtD,CAAtB;AACA,UAAMC,kBAAkB,GAAGD,aAAa,CAACR,aAAd,CAA6B,IAAGrE,WAAW,CAAC8E,kBAAmB,EAA/D,CAA3B;AACAA,IAAAA,kBAAkB,CAAC9B,KAAnB,CAAyBE,KAAzB,GAAiC,MAAjC;AACA,QAAI6B,wBAAwB,GAAG,CAAC,CAACzB,cAAc,GAAGW,eAAe,CAACI,aAAhB,CAA+B,IAAGrE,WAAW,CAACgF,gBAAiB,EAA/D,CAAlB,KAAwF,IAAxF,GAA+F,KAAK,CAApG,GAAwG1B,cAAc,CAAC2B,YAAxH,KAAyI,CAAxK;AACA,QAAIC,uBAAuB,GAAG,CAAC,CAAC3B,eAAe,GAAGU,eAAe,CAACI,aAAhB,CAA+B,IAAGrE,WAAW,CAACmF,eAAgB,EAA9D,CAAnB,KAAwF,IAAxF,GAA+F,KAAK,CAApG,GAAwG5B,eAAe,CAAC0B,YAAzH,KAA0I,CAAxK;;AAEA,QAAIzB,gBAAgB,CAACE,WAArB,EAAkC;AAChC,UAAI0B,qBAAJ;;AAEA,OAACA,qBAAqB,GAAGlB,SAAS,CAACG,aAAV,CAAyB,IAAGrE,WAAW,CAACgF,gBAAiB,EAAzD,CAAzB,KAAyF,IAAzF,GAAgG,KAAK,CAArG,GAAyGI,qBAAqB,CAACC,MAAtB,EAAzG;AACAN,MAAAA,wBAAwB,GAAG,CAA3B;AACD;;AAED,QAAIvB,gBAAgB,CAACG,UAArB,EAAiC;AAC/B,UAAI2B,sBAAJ;;AAEA,OAACA,sBAAsB,GAAGpB,SAAS,CAACG,aAAV,CAAyB,IAAGrE,WAAW,CAACmF,eAAgB,EAAxD,CAA1B,KAAyF,IAAzF,GAAgG,KAAK,CAArG,GAAyGG,sBAAsB,CAACD,MAAvB,EAAzG;AACAH,MAAAA,uBAAuB,GAAG,CAA1B;AACD,KArDuE,CAqDtE;;;AAGFhB,IAAAA,SAAS,CAAClB,KAAV,CAAgBG,MAAhB,GAA0B,GAAEY,QAAQ,CAACwB,sBAAT,GAAkCzB,iBAAlC,GAAsDiB,wBAAtD,GAAiFG,uBAAwB,IAArI,CAxDwE,CAwDkE;AAC1I;;AAEA,UAAMM,SAAS,GAAG1C,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAlB;AACAyC,IAAAA,SAAS,CAACC,WAAV,CAAsBvB,SAAtB;AACAN,IAAAA,QAAQ,CAAC8B,IAAT,CAAcC,SAAd,GAA0BH,SAAS,CAACG,SAApC;AACA,UAAMC,gBAAgB,GAAG,OAAOpC,gBAAgB,CAACqC,SAAxB,KAAsC,UAAtC,GAAmDrC,gBAAgB,CAACqC,SAAjB,EAAnD,GAAkFrC,gBAAgB,CAACqC,SAA5H;;AAEA,QAAI,OAAOD,gBAAP,KAA4B,QAAhC,EAA0C;AACxC;AACA,YAAME,YAAY,GAAGlC,QAAQ,CAACb,aAAT,CAAuB,OAAvB,CAArB;AACA+C,MAAAA,YAAY,CAACL,WAAb,CAAyB7B,QAAQ,CAACmC,cAAT,CAAwBH,gBAAxB,CAAzB;AACAhC,MAAAA,QAAQ,CAACoC,IAAT,CAAcP,WAAd,CAA0BK,YAA1B;AACD;;AAED,QAAItC,gBAAgB,CAACyC,aAArB,EAAoC;AAClCrC,MAAAA,QAAQ,CAAC8B,IAAT,CAAcQ,SAAd,CAAwBC,GAAxB,CAA4B,GAAG3C,gBAAgB,CAACyC,aAAjB,CAA+BG,KAA/B,CAAqC,GAArC,CAA/B;AACD;;AAED,QAAI5C,gBAAgB,CAACC,UAArB,EAAiC;AAC/B,YAAM4C,iBAAiB,GAAG/E,GAAG,CAACK,OAAJ,CAAY2E,gBAAZ,CAA6B,+BAA7B,CAA1B;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,iBAAiB,CAACG,MAAtC,EAA8CD,CAAC,IAAI,CAAnD,EAAsD;AACpD,cAAME,IAAI,GAAGJ,iBAAiB,CAACE,CAAD,CAA9B;;AAEA,YAAIE,IAAI,CAACC,OAAL,KAAiB,OAArB,EAA8B;AAC5B,gBAAMC,oBAAoB,GAAG/C,QAAQ,CAACb,aAAT,CAAuB0D,IAAI,CAACC,OAA5B,CAA7B;AACA,gBAAME,KAAK,GAAGH,IAAI,CAACG,KAAnB;;AAEA,cAAIA,KAAJ,EAAW;AACT,gBAAIC,QAAQ,GAAG,EAAf,CADS,CACU;;AAEnB,iBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,QAAN,CAAeP,MAAnC,EAA2CM,CAAC,IAAI,CAAhD,EAAmD;AACjD,kBAAI,OAAOF,KAAK,CAACG,QAAN,CAAeD,CAAf,EAAkBE,OAAzB,KAAqC,QAAzC,EAAmD;AACjDH,gBAAAA,QAAQ,IAAK,GAAED,KAAK,CAACG,QAAN,CAAeD,CAAf,EAAkBE,OAAQ,MAAzC;AACD;AACF;;AAEDL,YAAAA,oBAAoB,CAAClB,WAArB,CAAiC7B,QAAQ,CAACmC,cAAT,CAAwBc,QAAxB,CAAjC;AACAjD,YAAAA,QAAQ,CAACoC,IAAT,CAAcP,WAAd,CAA0BkB,oBAA1B;AACD;AACF,SAhBD,MAgBO,IAAIF,IAAI,CAACQ,YAAL,CAAkB,MAAlB,CAAJ,EAA+B;AACpC;AACA,gBAAMN,oBAAoB,GAAG/C,QAAQ,CAACb,aAAT,CAAuB0D,IAAI,CAACC,OAA5B,CAA7B;;AAEA,eAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,IAAI,CAACS,UAAL,CAAgBV,MAApC,EAA4CM,CAAC,IAAI,CAAjD,EAAoD;AAClD,kBAAMK,IAAI,GAAGV,IAAI,CAACS,UAAL,CAAgBJ,CAAhB,CAAb;;AAEA,gBAAIK,IAAJ,EAAU;AACRR,cAAAA,oBAAoB,CAACS,YAArB,CAAkCD,IAAI,CAACE,QAAvC,EAAiDF,IAAI,CAACG,SAAL,IAAkB,EAAnE;AACD;AACF;;AAED1D,UAAAA,QAAQ,CAACoC,IAAT,CAAcP,WAAd,CAA0BkB,oBAA1B;AACD;AACF;AACF,KAhHuE,CAgHtE;;;AAGF,QAAIY,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAA7B,EAAqC;AACnCpE,MAAAA,WAAW,CAACqE,aAAZ,CAA0BC,KAA1B;AACD;AACF,GAtH6B,EAsH3B,CAACxG,MAAD,EAASG,GAAT,CAtH2B,CAA9B;AAuHA,QAAMsG,2BAA2B,GAAGnI,KAAK,CAACqC,WAAN,CAAkBuB,WAAW,IAAI;AACnE,QAAIwE,qBAAJ,EAA2BC,sBAA3B,CADmE,CAGnE;;;AACAxG,IAAAA,GAAG,CAACK,OAAJ,CAAY+D,IAAZ,CAAiBqC,WAAjB,CAA6B1E,WAA7B,EAJmE,CAIxB;;AAE3ClC,IAAAA,MAAM,CAACQ,OAAP,CAAeqG,YAAf,CAA4BxG,iBAAiB,CAACG,OAAlB,IAA6B,EAAzD;;AAEA,QAAI,EAAE,CAACkG,qBAAqB,GAAGrG,iBAAiB,CAACG,OAA3C,KAAuD,IAAvD,IAA+D,CAACmG,sBAAsB,GAAGD,qBAAqB,CAACvF,OAAhD,KAA4D,IAA3H,IAAmIwF,sBAAsB,CAACG,qBAA5J,CAAJ,EAAwL;AACtL;AACA9G,MAAAA,MAAM,CAACQ,OAAP,CAAee,wBAAf,CAAwCjB,wBAAwB,CAACE,OAAjE;AACD;;AAEDR,IAAAA,MAAM,CAACQ,OAAP,CAAeuG,6BAAf,GAbmE,CAanB;;AAEhD1G,IAAAA,iBAAiB,CAACG,OAAlB,GAA4B,IAA5B;AACAF,IAAAA,wBAAwB,CAACE,OAAzB,GAAmC,EAAnC;AACD,GAjBmC,EAiBjC,CAACR,MAAD,CAjBiC,CAApC;AAkBA,QAAMgH,iBAAiB,GAAG1I,KAAK,CAACqC,WAAN,CAAkB,MAAMI,OAAN,IAAiB;AAC3Db,IAAAA,MAAM,CAAC+G,KAAP,CAAc,sBAAd;;AAEA,QAAI,CAACjH,MAAM,CAACQ,OAAP,CAAeC,cAAf,CAA8BD,OAAnC,EAA4C;AAC1C,YAAM,IAAI0G,KAAJ,CAAU,sCAAV,CAAN;AACD;;AAED7G,IAAAA,iBAAiB,CAACG,OAAlB,GAA4BR,MAAM,CAACQ,OAAP,CAAe2G,WAAf,EAA5B,CAP2D,CAOD;;AAE1D7G,IAAAA,wBAAwB,CAACE,OAAzB,GAAmC7B,iCAAiC,CAACqB,MAAD,CAApE;;AAEA,QAAIC,KAAK,CAACmH,UAAV,EAAsB;AACpB,YAAMC,eAAe,GAAG5I,2BAA2B,CAACuB,MAAD,CAAnD;AACAA,MAAAA,MAAM,CAACQ,OAAP,CAAe8G,WAAf,CAA2BD,eAA3B;AACD;;AAED,UAAM3G,yBAAyB,CAACK,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACH,MAApC,EAA4CG,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACF,UAA/E,CAA/B;AACAb,IAAAA,MAAM,CAACQ,OAAP,CAAe+G,8BAAf;AACA,UAAMlI,GAAG,EAAT,CAlB2D,CAkB9C;;AAEb,UAAM6C,WAAW,GAAGV,gBAAgB,CAACT,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACyG,QAApC,CAApC;;AAEA,QAAIpB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAA7B,EAAqC;AACnCnG,MAAAA,GAAG,CAACK,OAAJ,CAAY+D,IAAZ,CAAiBD,WAAjB,CAA6BpC,WAA7B,EADmC,CACQ;;AAE3CD,MAAAA,qBAAqB,CAACC,WAAD,EAAcnB,OAAd,CAArB;AACA0F,MAAAA,2BAA2B,CAACvE,WAAD,CAA3B;AACD,KALD,MAKO;AACLA,MAAAA,WAAW,CAACuF,MAAZ,GAAqB,MAAM;AACzBxF,QAAAA,qBAAqB,CAACC,WAAD,EAAcnB,OAAd,CAArB;AACA,cAAM2G,cAAc,GAAGxF,WAAW,CAACqE,aAAZ,CAA0BoB,UAA1B,CAAqC,OAArC,CAAvB;AACAD,QAAAA,cAAc,CAACE,gBAAf,CAAgC,QAAhC,EAA0CC,GAAG,IAAI;AAC/C,gBAAMC,YAAY,GAAGD,GAAG,CAACE,OAAJ,KAAgB,KAArC;;AAEA,cAAID,YAAJ,EAAkB;AAChBrB,YAAAA,2BAA2B,CAACvE,WAAD,CAA3B;AACD;AACF,SAND;AAOD,OAVD;;AAYA/B,MAAAA,GAAG,CAACK,OAAJ,CAAY+D,IAAZ,CAAiBD,WAAjB,CAA6BpC,WAA7B;AACD;AACF,GA1CyB,EA0CvB,CAACjC,KAAD,EAAQC,MAAR,EAAgBF,MAAhB,EAAwBwB,gBAAxB,EAA0CS,qBAA1C,EAAiEwE,2BAAjE,EAA8F/F,yBAA9F,CA1CuB,CAA1B;AA2CA,QAAMsH,cAAc,GAAG;AACrBhB,IAAAA;AADqB,GAAvB;AAGAlI,EAAAA,gBAAgB,CAACkB,MAAD,EAASgI,cAAT,EAAyB,oBAAzB,CAAhB;AACA;AACF;AACA;;AAEE,QAAMC,oBAAoB,GAAG3J,KAAK,CAACqC,WAAN,CAAkB,CAACuH,YAAD,EAAenH,OAAf,KAA2B;AACxE,QAAIoH,qBAAJ;;AAEA,QAAI,CAACA,qBAAqB,GAAGpH,OAAO,CAACqH,YAAjC,KAAkD,IAAlD,IAA0DD,qBAAqB,CAACE,oBAApF,EAA0G;AACxG,aAAOH,YAAP;AACD;;AAED,WAAO,CAAC,GAAGA,YAAJ,EAAkB;AACvBI,MAAAA,SAAS,EAAE,aAAalJ,IAAI,CAACF,uBAAD,EAA0B;AACpD6B,QAAAA,OAAO,EAAEA,OAAO,CAACqH;AADmC,OAA1B,CADL;AAIvBG,MAAAA,aAAa,EAAE;AAJQ,KAAlB,CAAP;AAMD,GAb4B,EAa1B,EAb0B,CAA7B;AAcAtJ,EAAAA,4BAA4B,CAACe,MAAD,EAAS,YAAT,EAAuBiI,oBAAvB,CAA5B;AACD,CApPM","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { ownerDocument } from '@mui/material/utils';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridVisibleRowCountSelector } from '../filter/gridFilterSelector';\nimport { gridColumnDefinitionsSelector, gridColumnVisibilityModelSelector } from '../columns/gridColumnsSelector';\nimport { gridDensityTotalHeaderHeightSelector } from '../density/densitySelector';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getColumnsToExport } from './utils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GridPrintExportMenuItem } from '../../../components/toolbar/GridToolbarExport';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction raf() {\n  return new Promise(resolve => {\n    requestAnimationFrame(() => {\n      resolve();\n    });\n  });\n}\n\nfunction getChromeVersion() {\n  const raw = navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./);\n  return raw ? parseInt(raw[2], 10) : null;\n}\n\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridParamsApi (method)\n */\nexport const useGridPrintExport = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridPrintExport');\n  const doc = React.useRef(null);\n  const previousGridState = React.useRef(null);\n  const previousColumnVisibility = React.useRef({});\n  React.useEffect(() => {\n    doc.current = ownerDocument(apiRef.current.rootElementRef.current);\n  }, [apiRef]); // Returns a promise because updateColumns triggers state update and\n  // the new state needs to be in place before the grid can be sized correctly\n\n  const updateGridColumnsForPrint = React.useCallback((fields, allColumns) => new Promise(resolve => {\n    // TODO remove unused Promise\n    if (!fields && !allColumns) {\n      resolve();\n      return;\n    }\n\n    const exportedColumnFields = getColumnsToExport({\n      apiRef,\n      options: {\n        fields,\n        allColumns\n      }\n    }).map(column => column.field);\n    const columns = gridColumnDefinitionsSelector(apiRef);\n    const newColumnVisibilityModel = {};\n    columns.forEach(column => {\n      newColumnVisibilityModel[column.field] = exportedColumnFields.includes(column.field);\n    });\n    apiRef.current.setColumnVisibilityModel(newColumnVisibilityModel);\n    resolve();\n  }), [apiRef]); // TODO move outside of this scope and remove React.useCallback\n\n  const buildPrintWindow = React.useCallback(title => {\n    const iframeEl = document.createElement('iframe');\n    iframeEl.style.position = 'absolute';\n    iframeEl.style.width = '0px';\n    iframeEl.style.height = '0px';\n    iframeEl.title = title || document.title;\n    return iframeEl;\n  }, []);\n  const handlePrintWindowLoad = React.useCallback((printWindow, options) => {\n    var _querySelector, _querySelector2;\n\n    const normalizeOptions = _extends({\n      copyStyles: true,\n      hideToolbar: false,\n      hideFooter: false\n    }, options);\n\n    const printDoc = printWindow.contentDocument;\n\n    if (!printDoc) {\n      return;\n    }\n\n    const totalHeaderHeight = gridDensityTotalHeaderHeightSelector(apiRef);\n    const rowsMeta = gridRowsMetaSelector(apiRef.current.state);\n    const gridRootElement = apiRef.current.rootElementRef.current;\n    const gridClone = gridRootElement.cloneNode(true);\n    const gridCloneViewport = gridClone.querySelector(`.${gridClasses.virtualScroller}`); // Expand the viewport window to prevent clipping\n\n    gridCloneViewport.style.height = 'auto';\n    gridCloneViewport.style.width = 'auto';\n    gridCloneViewport.parentElement.style.width = 'auto';\n    gridCloneViewport.parentElement.style.height = 'auto'; // Allow to overflow to not hide the border of the last row\n\n    const gridMain = gridClone.querySelector(`.${gridClasses.main}`);\n    gridMain.style.overflow = 'visible';\n    const chromeVersion = getChromeVersion();\n\n    if (chromeVersion && chromeVersion >= 108) {\n      // See https://support.google.com/chrome/thread/191619088?hl=en&msgid=193009642\n      gridClone.style.contain = 'size';\n    }\n\n    const columnHeaders = gridClone.querySelector(`.${gridClasses.columnHeaders}`);\n    const columnHeadersInner = columnHeaders.querySelector(`.${gridClasses.columnHeadersInner}`);\n    columnHeadersInner.style.width = '100%';\n    let gridToolbarElementHeight = ((_querySelector = gridRootElement.querySelector(`.${gridClasses.toolbarContainer}`)) == null ? void 0 : _querySelector.clientHeight) || 0;\n    let gridFooterElementHeight = ((_querySelector2 = gridRootElement.querySelector(`.${gridClasses.footerContainer}`)) == null ? void 0 : _querySelector2.clientHeight) || 0;\n\n    if (normalizeOptions.hideToolbar) {\n      var _gridClone$querySelec;\n\n      (_gridClone$querySelec = gridClone.querySelector(`.${gridClasses.toolbarContainer}`)) == null ? void 0 : _gridClone$querySelec.remove();\n      gridToolbarElementHeight = 0;\n    }\n\n    if (normalizeOptions.hideFooter) {\n      var _gridClone$querySelec2;\n\n      (_gridClone$querySelec2 = gridClone.querySelector(`.${gridClasses.footerContainer}`)) == null ? void 0 : _gridClone$querySelec2.remove();\n      gridFooterElementHeight = 0;\n    } // Expand container height to accommodate all rows\n\n\n    gridClone.style.height = `${rowsMeta.currentPageTotalHeight + totalHeaderHeight + gridToolbarElementHeight + gridFooterElementHeight}px`; // printDoc.body.appendChild(gridClone); should be enough but a clone isolation bug in Safari\n    // prevents us to do it\n\n    const container = document.createElement('div');\n    container.appendChild(gridClone);\n    printDoc.body.innerHTML = container.innerHTML;\n    const defaultPageStyle = typeof normalizeOptions.pageStyle === 'function' ? normalizeOptions.pageStyle() : normalizeOptions.pageStyle;\n\n    if (typeof defaultPageStyle === 'string') {\n      // TODO custom styles should always win\n      const styleElement = printDoc.createElement('style');\n      styleElement.appendChild(printDoc.createTextNode(defaultPageStyle));\n      printDoc.head.appendChild(styleElement);\n    }\n\n    if (normalizeOptions.bodyClassName) {\n      printDoc.body.classList.add(...normalizeOptions.bodyClassName.split(' '));\n    }\n\n    if (normalizeOptions.copyStyles) {\n      const headStyleElements = doc.current.querySelectorAll(\"style, link[rel='stylesheet']\");\n\n      for (let i = 0; i < headStyleElements.length; i += 1) {\n        const node = headStyleElements[i];\n\n        if (node.tagName === 'STYLE') {\n          const newHeadStyleElements = printDoc.createElement(node.tagName);\n          const sheet = node.sheet;\n\n          if (sheet) {\n            let styleCSS = ''; // NOTE: for-of is not supported by IE\n\n            for (let j = 0; j < sheet.cssRules.length; j += 1) {\n              if (typeof sheet.cssRules[j].cssText === 'string') {\n                styleCSS += `${sheet.cssRules[j].cssText}\\r\\n`;\n              }\n            }\n\n            newHeadStyleElements.appendChild(printDoc.createTextNode(styleCSS));\n            printDoc.head.appendChild(newHeadStyleElements);\n          }\n        } else if (node.getAttribute('href')) {\n          // If `href` tag is empty, avoid loading these links\n          const newHeadStyleElements = printDoc.createElement(node.tagName);\n\n          for (let j = 0; j < node.attributes.length; j += 1) {\n            const attr = node.attributes[j];\n\n            if (attr) {\n              newHeadStyleElements.setAttribute(attr.nodeName, attr.nodeValue || '');\n            }\n          }\n\n          printDoc.head.appendChild(newHeadStyleElements);\n        }\n      }\n    } // Trigger print\n\n\n    if (process.env.NODE_ENV !== 'test') {\n      printWindow.contentWindow.print();\n    }\n  }, [apiRef, doc]);\n  const handlePrintWindowAfterPrint = React.useCallback(printWindow => {\n    var _previousGridState$cu, _previousGridState$cu2;\n\n    // Remove the print iframe\n    doc.current.body.removeChild(printWindow); // Revert grid to previous state\n\n    apiRef.current.restoreState(previousGridState.current || {});\n\n    if (!((_previousGridState$cu = previousGridState.current) != null && (_previousGridState$cu2 = _previousGridState$cu.columns) != null && _previousGridState$cu2.columnVisibilityModel)) {\n      // if the apiRef.current.exportState(); did not exported the column visibility, we update it\n      apiRef.current.setColumnVisibilityModel(previousColumnVisibility.current);\n    }\n\n    apiRef.current.unstable_enableVirtualization(); // Clear local state\n\n    previousGridState.current = null;\n    previousColumnVisibility.current = {};\n  }, [apiRef]);\n  const exportDataAsPrint = React.useCallback(async options => {\n    logger.debug(`Export data as Print`);\n\n    if (!apiRef.current.rootElementRef.current) {\n      throw new Error('MUI: No grid root element available.');\n    }\n\n    previousGridState.current = apiRef.current.exportState(); // It appends that the visibility model is not exported, especially if columnVisibility is not controlled\n\n    previousColumnVisibility.current = gridColumnVisibilityModelSelector(apiRef);\n\n    if (props.pagination) {\n      const visibleRowCount = gridVisibleRowCountSelector(apiRef);\n      apiRef.current.setPageSize(visibleRowCount);\n    }\n\n    await updateGridColumnsForPrint(options == null ? void 0 : options.fields, options == null ? void 0 : options.allColumns);\n    apiRef.current.unstable_disableVirtualization();\n    await raf(); // wait for the state changes to take action\n\n    const printWindow = buildPrintWindow(options == null ? void 0 : options.fileName);\n\n    if (process.env.NODE_ENV === 'test') {\n      doc.current.body.appendChild(printWindow); // In test env, run the all pipeline without waiting for loading\n\n      handlePrintWindowLoad(printWindow, options);\n      handlePrintWindowAfterPrint(printWindow);\n    } else {\n      printWindow.onload = () => {\n        handlePrintWindowLoad(printWindow, options);\n        const mediaQueryList = printWindow.contentWindow.matchMedia('print');\n        mediaQueryList.addEventListener('change', mql => {\n          const isAfterPrint = mql.matches === false;\n\n          if (isAfterPrint) {\n            handlePrintWindowAfterPrint(printWindow);\n          }\n        });\n      };\n\n      doc.current.body.appendChild(printWindow);\n    }\n  }, [props, logger, apiRef, buildPrintWindow, handlePrintWindowLoad, handlePrintWindowAfterPrint, updateGridColumnsForPrint]);\n  const printExportApi = {\n    exportDataAsPrint\n  };\n  useGridApiMethod(apiRef, printExportApi, 'GridPrintExportApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const addExportMenuButtons = React.useCallback((initialValue, options) => {\n    var _options$printOptions;\n\n    if ((_options$printOptions = options.printOptions) != null && _options$printOptions.disableToolbarButton) {\n      return initialValue;\n    }\n\n    return [...initialValue, {\n      component: /*#__PURE__*/_jsx(GridPrintExportMenuItem, {\n        options: options.printOptions\n      }),\n      componentName: 'printExport'\n    }];\n  }, []);\n  useGridRegisterPipeProcessor(apiRef, 'exportMenu', addExportMenuButtons);\n};"]},"metadata":{},"sourceType":"module"}